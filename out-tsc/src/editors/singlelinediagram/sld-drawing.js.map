{"version":3,"file":"sld-drawing.js","sourceRoot":"","sources":["../../../../src/editors/singlelinediagram/sld-drawing.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,mBAAmB,GAEpB,MAAM,uCAAuC,CAAC;AAC/C,OAAO,EAAE,QAAQ,EAAE,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,OAAO,EAAE,MAAM,8BAA8B,CAAC;AACvD,OAAO,EACL,oBAAoB,EACpB,8BAA8B,GAC/B,MAAM,gBAAgB,CAAC;AAExB,OAAO,EACL,sBAAsB,EACtB,uBAAuB,EACvB,gBAAgB,EAEhB,sBAAsB,EACtB,oCAAoC,GACrC,MAAM,iBAAiB,CAAC;AAEzB;;GAEG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,EAAE,CAAC;AAEhC;;GAEG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,EAAE,CAAC;AAEvC;;GAEG;AACH,MAAM,eAAe,GAAG,CAAC,CAAC;AAmB1B;;;;;GAKG;AACH,MAAM,UAAU,mBAAmB,CAAC,OAAgB;IAClD,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IAC5D,OAAO;QACL,CAAC,EAAE,mBAAmB,CAAC,CAAE,GAAG,aAAa;QACzC,CAAC,EAAE,mBAAmB,CAAC,CAAE,GAAG,aAAa;KAC1C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,mCAAmC,CACjD,gBAAyB;IAEzB,MAAM,mBAAmB,GACvB,oCAAoC,CAAC,gBAAgB,CAAC,CAAC;IACzD,OAAO;QACL,CAAC,EAAE,mBAAmB,CAAC,CAAE,GAAG,aAAa;QACzC,CAAC,EAAE,mBAAmB,CAAC,CAAE,GAAG,aAAa;KAC1C,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,oBAAoB,CAClC,YAAqB;IAErB,MAAM,aAAa,GAAY,YAAY,CAAC,aAAa,CAAC;IAC1D,OAAO,gBAAgB,CAAC,aAAa,CAAC,CAAC;AACzC,CAAC;AAED;;;;GAIG;AACH,SAAS,kBAAkB,CAAC,OAAgB;IAC1C,MAAM,YAAY,GAAG,QAAQ,CAAC,eAAe,CAC3C,4BAA4B,EAC5B,GAAG,CACJ,CAAC;IACF,YAAY,CAAC,YAAY,CACvB,IAAI,EACJ,OAAO,QAAQ,CAAC,OAAO,CAAC,KAAK,QAAQ;QACnC,CAAC,CAAS,QAAQ,CAAC,OAAO,CAAC;QAC3B,CAAC,CAAC,gBAAgB,CACrB,CAAC;IACF,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;IAEnD,MAAM,WAAW,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC;IACrD,IAAI,WAAW;QAAE,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IAEhE,uDAAuD;IACvD,iDAAiD;IACjD,MAAM,WAAW,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACpD,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IACvD,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IAEvD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,yBAAyB,CAAC,YAAqB;IAC7D,OAAO,kBAAkB,CAAC,YAAY,CAAC,CAAC;AAC1C,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,GAAY;IAC3C,OAAO,kBAAkB,CAAC,GAAG,CAAC,CAAC;AACjC,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,iBAAiB,CAC/B,WAAmB,EACnB,WAAkB,EAClB,QAAgB;IAEhB,MAAM,YAAY,GAAG,QAAQ,CAAC,eAAe,CAC3C,4BAA4B,EAC5B,MAAM,CACP,CAAC;IAEF,YAAY,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,YAAY,CAAC,YAAY,CACvB,OAAO,EACP,iEAAiE,QAAQ,EAAE,CAC5E,CAAC;IAEF,YAAY,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IACnD,YAAY,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IAEnD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,qBAAqB,CACnC,eAAsB,EACtB,UAAgB,EAChB,eAAwB,EACxB,WAAuB;IAEvB,MAAM,YAAY,GAAG,kBAAkB,CAAC,eAAe,CAAC,CAAC;IAEzD,MAAM,gBAAgB,GACpB,OAAO,QAAQ,CAAC,eAAe,CAAC,KAAK,QAAQ;QAC3C,CAAC,CAAS,QAAQ,CAAC,eAAe,CAAC;QACnC,CAAC,CAAC,gBAAgB,CAAC;IAEvB,MAAM,qBAAqB,GAAG,2BAA2B,CACvD,eAAe,EACf,UAAU,CACX,CAAC;IAEF,uCAAuC;IACvC,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC,4BAA4B,EAAE,QAAQ,CAAC,CAAC;IAC9E,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,gBAAgB,EAAE,CAAC,CAAC;IAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC;IACtD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC;IACtD,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAE5B,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAE/B,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAEpD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,mBAAmB,CACjC,aAAsB,EACtB,8BAAsC;IAEtC,MAAM,YAAY,GAAG,kBAAkB,CAAC,aAAa,CAAC,CAAC;IAEvD,MAAM,UAAU,GAAG,gBAAgB,CAAC,aAAa,CAAE,CAAC;IACpD,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;IAE5D,uCAAuC;IACvC,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC,CAAC;IAC5E,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,gBAAgB,CAAC,aAAa,CAAE,CAAC,CAAC;IAC5D,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;IACvC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAE5C,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC;IACjD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC;IACjD,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,8BAA8B,EAAE,CAAC,CAAC;IAC7D,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC;IAEjD,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAE/B,MAAM,IAAI,GAAG,iBAAiB,CAC5B,UAAU,EACV,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAE,GAAG,EAAE,EAAE,EACtD,OAAO,CACR,CAAC;IACF,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAE/B,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gCAAgC,CAC9C,gBAAyB;IAEzB,MAAM,YAAY,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;IAE1D,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC/D,MAAM,UAAU,GAAG,IAAI,SAAS,EAAE,CAAC,eAAe,CAChD,OAAO,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EACpC,iBAAiB,CAClB,CAAC;IACF,UAAU,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC7D,IAAI,CAAC,YAAY,CACf,WAAW,EACX,aAAa,gBAAgB,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,CACzD,CAAC;QACF,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,iBAAiB,CAC5B,gBAAgB,CAAC,gBAAgB,CAAE,EACnC,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAE,GAAG,EAAE,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAE,GAAG,EAAE,EAAE,EAC5D,SAAS,CACV,CAAC;IACF,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAE/B,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,6BAA6B,CAC3C,uBAAgC;IAEhC,MAAM,YAAY,GAAG,kBAAkB,CAAC,uBAAuB,CAAC,CAAC;IAEjE,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,uBAAuB,CAAC,CAAC;IACtE,MAAM,UAAU,GAAG,IAAI,SAAS,EAAE,CAAC,eAAe,CAChD,8BAA8B,CAAC,OAAO,CAAC,CAAC,CAAC,EACzC,iBAAiB,CAClB,CAAC;IACF,UAAU,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC7D,IAAI,CAAC,YAAY,CACf,WAAW,EACX,aAAa,gBAAgB,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,cAAc,CACpE,CAAC;QACF,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,iBAAiB,CAC5B,gBAAgB,CAAC,uBAAuB,CAAE,EAC1C,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAE,GAAG,EAAE,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAE,GAAG,EAAE,EAAE,EAC5D,SAAS,CACV,CAAC;IACF,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAE/B,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,6BAA6B,CAC3C,YAAqB,EACrB,QAAe,EACf,WAAuB;IAEvB,MAAM,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAC;IAEtD,MAAM,UAAU,GAAG,IAAI,SAAS,EAAE,CAAC,eAAe,CAChD,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC,EAC/B,iBAAiB,CAClB,CAAC;IACF,UAAU,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnD,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,aAAa,QAAQ,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;QACzE,YAAY,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,YAAY,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IAEpD,OAAO,YAAY,CAAC;AACtB,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,wBAAwB,CACtC,MAAa,EACb,MAAa,EACb,WAAkB,EAClB,WAAkB,EAClB,WAAwB;IAExB;;;OAGG;IACH,MAAM,iBAAiB,GAAG,kCAAkC,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IAClF,MAAM,iBAAiB,GAAG,kCAAkC,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;IAElF,MAAM,MAAM,GAAG;QACb,IAAI,EAAE,iBAAiB,CAAC,CAAE;QAC1B,GAAG,EAAE,iBAAiB,CAAC,CAAE;QACzB,KAAK,EAAE,WAAW,EAAE,KAAK;QACzB,MAAM,EAAE,WAAW,EAAE,MAAM;KAC5B,CAAC;IAEF,MAAM,MAAM,GAAG;QACb,IAAI,EAAE,iBAAiB,CAAC,CAAE;QAC1B,GAAG,EAAE,iBAAiB,CAAC,CAAE;QACzB,KAAK,EAAE,WAAW,EAAE,KAAK;QACzB,MAAM,EAAE,WAAW,EAAE,MAAM;KAC5B,CAAC;IAEF,2BAA2B;IAC3B,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAE5C,MAAM,IAAI,GAAG,mBAAmB,CAAC,KAAK,CAAC;QACrC,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE;QAChE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,UAAU,EAAE,QAAQ,EAAE,GAAG,EAAE;QAChE,WAAW,EAAE,CAAC;QACd,kBAAkB,EAAE,CAAC;QACrB,YAAY,EAAE;YACZ,IAAI,EAAE,CAAC;YACP,GAAG,EAAE,CAAC;YACN,KAAK,EAAE,KAAK;YACZ,MAAM,EAAE,KAAK;SACd;KACF,CAAC,CAAC;IAEH,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC,CAAC;IAC5E,IAAI,CAAC,GAAG,EAAE,CAAC;IACX,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,EAAE,EAAE;QAC/B,IAAI,KAAK,KAAK,CAAC,EAAE;YACf,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;SACxB;aAAM;YACL,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;SACxB;IACH,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IAC1B,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;IACzC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;IAC5C,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAEzC,sFAAsF;IACtF,uDAAuD;IACvD,uEAAuE;IACvE,WAAW,CAAC,qBAAqB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IAEtD,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;GAMG;AACF,MAAM,UAAU,oBAAoB,CAAC,OAAe,EAAE,WAAmB,EAAE,GAAgB;IAC1F,IAAI,EAAC,MAAM,EAAE,KAAK,EAAC,GAAG,EAAC,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC;IAE5C,GAAG,CAAC,gBAAgB,CAClB,SAAS,OAAO,cAAc,WAAW,IAAI,CAC9C,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE;QACZ,MAAM,GAAG,CAAC,CAAC,qBAAqB,EAAE,CAAC,MAAM,CAAC;QAC1C,KAAK,GAAG,CAAC,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,OAAO,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC;AACzB,CAAC;AAED;;;;;;GAMG;AACH,SAAS,aAAa,CAAC,MAAa,EAAE,MAAa;IACjD,IAAI,MAAM,CAAC,CAAE,IAAI,MAAM,CAAC,CAAE,EAAE;QAC1B,IAAI,MAAM,CAAC,CAAE,GAAG,MAAM,CAAC,CAAE,EAAE;YACzB,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC;SACpD;aAAM;YACL,OAAO,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC;SACpD;KACF;SAAM;QACL,IAAI,MAAM,CAAC,CAAE,IAAI,MAAM,CAAC,CAAE,EAAE;YAC1B,IAAI,MAAM,CAAC,CAAE,GAAG,MAAM,CAAC,CAAE,EAAE;gBACzB,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;aACpD;iBAAM;gBACL,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;aACpD;SACF;aAAM;YACL,IAAI,MAAM,CAAC,CAAE,GAAG,MAAM,CAAC,CAAE,EAAE;gBACzB,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,CAAC;aACpD;iBAAM;gBACL,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;aACpD;SACF;KACF;AACH,CAAC;AAED;;;;GAIG;AACH,SAAS,2BAA2B,CAClC,sBAA6B,EAC7B,IAAU;IAEV,QAAQ,IAAI,EAAE;QACZ,KAAK,KAAK,CAAC,CAAC;YACV,MAAM,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;YACnC,OAAO;gBACL,CAAC,EAAE,CAAE,GAAG,oBAAoB,GAAG,CAAC;gBAChC,CAAC,EAAE,CAAE,GAAG,eAAe;aACxB,CAAC;SACH;QACD,KAAK,QAAQ,CAAC,CAAC;YACb,MAAM,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;YACnC,OAAO;gBACL,CAAC,EAAE,CAAE,GAAG,oBAAoB,GAAG,CAAC;gBAChC,CAAC,EAAE,CAAE,GAAG,CAAC,oBAAoB,GAAG,eAAe,CAAC;aACjD,CAAC;SACH;QACD,KAAK,MAAM,CAAC,CAAC;YACX,MAAM,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;YACnC,OAAO;gBACL,CAAC,EAAE,CAAE,GAAG,eAAe;gBACvB,CAAC,EAAE,CAAE,GAAG,oBAAoB,GAAG,CAAC;aACjC,CAAC;SACH;QACD,KAAK,OAAO,CAAC,CAAC;YACZ,MAAM,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC;YACnC,OAAO;gBACL,CAAC,EAAE,CAAE,GAAG,CAAC,oBAAoB,GAAG,eAAe,CAAC;gBAChD,CAAC,EAAE,CAAE,GAAG,oBAAoB,GAAG,CAAC;aACjC,CAAC;SACH;QACD,OAAO,CAAC,CAAC;YACP,OAAO,sBAAsB,CAAC;SAC/B;KACF;AACH,CAAC;AAED;;;;;GAKG;AACH,SAAS,kCAAkC,CAAC,KAAY,EAAE,KAAY;IACpE,OAAO;QACL,CAAC,EAAE,KAAK,CAAC,CAAE,GAAG,CAAC,CAAC,oBAAoB,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACxD,CAAC,EAAE,KAAK,CAAC,CAAE,GAAG,CAAC,CAAC,oBAAoB,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAC1D,CAAA;AACH,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,eAAe,CAAC,IAA2B;IACzD,OAAO,CACL,IAAI,CAAC,GAAG,CACN,GAAG,KAAK,CAAC,IAAI,CACX,IAAI,CAAC,gBAAgB,CAAC,uCAAuC,CAAC,CAC/D,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,mBAAmB,CAAC,SAAS,CAAC,CAAC,CAAE,CAAC,CACtD,GAAG,aAAa,CAClB,CAAC;AACJ,CAAC","sourcesContent":["import {\n  OrthogonalConnector,\n  Side,\n} from '../../../public/js/ortho-connector.js';\nimport { identity } from '../../foundation.js';\nimport { getIcon } from '../../zeroline/foundation.js';\nimport {\n  connectivityNodeIcon,\n  powerTransformerTwoWindingIcon,\n} from '../../icons.js';\n\nimport {\n  getRelativeCoordinates,\n  getDescriptionAttribute,\n  getNameAttribute,\n  Point,\n  getAbsoluteCoordinates,\n  calculateConnectivityNodeCoordinates,\n} from './foundation.js';\n\n/**\n * Default 'grid size' of our SVG.\n */\nexport const SVG_GRID_SIZE = 64;\n\n/**\n * The default element size of an SCL element.\n */\nexport const DEFAULT_ELEMENT_SIZE = 25;\n\n/**\n * Offset of a terminal next to an element.\n */\nconst TERMINAL_OFFSET = 6;\n\n/**\n * Defining the sides of route drawing of the two points\n * at the end of a route.\n */\ninterface PointSides {\n  pointASide: Side;\n  pointBSide: Side;\n}\n\n/**\n * Interface defining height and width for a shape drawing routes.\n */\ninterface Shape {\n  height: number;\n  width: number;\n}\n\n/**\n * Get the full position of an element (multiplied with an offset for the SVG).\n * It's just a matter of adding all the position up of the element including it's parent(s).\n * @param element - The element to get the position for.\n * @returns A point containing the full x/y position.\n */\nexport function getAbsolutePosition(element: Element): Point {\n  const absoluteCoordinates = getAbsoluteCoordinates(element);\n  return {\n    x: absoluteCoordinates.x! * SVG_GRID_SIZE,\n    y: absoluteCoordinates.y! * SVG_GRID_SIZE,\n  };\n}\n\n/**\n * Get the full position of an ConnecitvityNode SCL element (multiplied with an offset for the SVG).\n * @param connectivityNode - The SCL element ConnectivityNode to get the position for.\n * @returns A point containing the full x/y position in px.\n */\nexport function getAbsolutePositionConnectivityNode(\n  connectivityNode: Element\n): Point {\n  const absoluteCoordinates =\n    calculateConnectivityNodeCoordinates(connectivityNode);\n  return {\n    x: absoluteCoordinates.x! * SVG_GRID_SIZE,\n    y: absoluteCoordinates.y! * SVG_GRID_SIZE,\n  };\n}\n\n/**\n * Get the name of the parent of given child element.\n * @param childElement - The child element.\n * @returns The name.\n */\nexport function getParentElementName(\n  childElement: Element\n): string | undefined {\n  const parentElement = <Element>childElement.parentElement;\n  return getNameAttribute(parentElement);\n}\n\n/**\n * Create a <g> element based on a single XML element.\n * @param element - The element.\n * @returns The <g> element.\n */\nfunction createGroupElement(element: Element): SVGElement {\n  const finalElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'g'\n  );\n  finalElement.setAttribute(\n    'id',\n    typeof identity(element) === 'string'\n      ? <string>identity(element)\n      : 'unidentifiable'\n  );\n  finalElement.setAttribute('type', element.tagName);\n\n  const description = getDescriptionAttribute(element);\n  if (description) finalElement.setAttribute('desc', description);\n\n  // Setting the X and Y coordinates of this <g> element.\n  // It's not actually used, it's more informative.\n  const coordinates = getRelativeCoordinates(element);\n  finalElement.setAttribute('sxy:x', `${coordinates.x}`);\n  finalElement.setAttribute('sxy:y', `${coordinates.y}`);\n\n  return finalElement;\n}\n\n/**\n * Create a Voltage Level <g> element.\n * @param voltageLevel - The Voltage Level from the SCL document to use.\n * @returns A Voltage Level <g> element.\n */\nexport function createVoltageLevelElement(voltageLevel: Element): SVGElement {\n  return createGroupElement(voltageLevel);\n}\n\n/**\n * Create a Bay <g> element.\n * @param voltageLevel - The Bay from the SCL document to use.\n * @returns A Bay <g> element.\n */\nexport function createBayElement(bay: Element): SVGElement {\n  return createGroupElement(bay);\n}\n\n/**\n * Create a basic text element.\n * @param element - The text which is needing this text element.\n * @param coordinates - The x and y coordinates of this text elements.\n * @returns The text SVG element.\n */\nexport function createTextElement(\n  textContent: string,\n  coordinates: Point,\n  textSize: string\n): SVGElement {\n  const finalElement = document.createElementNS(\n    'http://www.w3.org/2000/svg',\n    'text'\n  );\n\n  finalElement.textContent = textContent;\n  finalElement.setAttribute(\n    'style',\n    `font-family: Roboto, sans-serif; font-weight: 300; font-size: ${textSize}`\n  );\n\n  finalElement.setAttribute('x', `${coordinates.x}`);\n  finalElement.setAttribute('y', `${coordinates.y}`);\n\n  return finalElement;\n}\n\n/**\n * Create a Terminal element.\n * @param elementPosition - The position of the element belonging to the terminal/\n * @param sideToDraw - The side of the element the terminal must be drawn on.\n * @param terminalElement - The terminal element to extract information from.\n * @param clickAction - The action to execute when the terminal is being clicked.\n * @returns The terminal SVG element.\n */\nexport function createTerminalElement(\n  elementPosition: Point,\n  sideToDraw: Side,\n  terminalElement: Element,\n  clickAction: () => void\n): SVGElement {\n  const groupElement = createGroupElement(terminalElement);\n\n  const terminalIdentity =\n    typeof identity(terminalElement) === 'string'\n      ? <string>identity(terminalElement)\n      : 'unidentifiable';\n\n  const pointToDrawTerminalOn = getAbsolutePositionTerminal(\n    elementPosition,\n    sideToDraw\n  );\n\n  // TODO: Add this to the icons.ts file.\n  const icon = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n  icon.setAttribute('id', `${terminalIdentity}`);\n  icon.setAttribute('cx', `${pointToDrawTerminalOn.x}`);\n  icon.setAttribute('cy', `${pointToDrawTerminalOn.y}`);\n  icon.setAttribute('r', '2');\n\n  groupElement.appendChild(icon);\n\n  groupElement.addEventListener('click', clickAction);\n\n  return groupElement;\n}\n\n/**\n * Create a Bus Bar element.\n * @param busBarElement - The Bus Bar SCL Element.\n * @param biggestVoltageLevelXCoordinate - The biggest of the VoltageLevel the bus bar is in,\n *      so the method can decide how long the bus bar should be.\n * @returns The Bus Bar SVG element.\n */\nexport function createBusBarElement(\n  busBarElement: Element,\n  biggestVoltageLevelXCoordinate: number\n): SVGElement {\n  const groupElement = createGroupElement(busBarElement);\n\n  const busBarName = getNameAttribute(busBarElement)!;\n  const absolutePosition = getAbsolutePosition(busBarElement);\n\n  // TODO: Add this to the icons.ts file.\n  const icon = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n  icon.setAttribute('name', getNameAttribute(busBarElement)!);\n  icon.setAttribute('stroke-width', '4');\n  icon.setAttribute('stroke', 'currentColor');\n\n  icon.setAttribute('x1', `${absolutePosition.x}`);\n  icon.setAttribute('y1', `${absolutePosition.y}`);\n  icon.setAttribute('x2', `${biggestVoltageLevelXCoordinate}`);\n  icon.setAttribute('y2', `${absolutePosition.y}`);\n\n  groupElement.appendChild(icon);\n\n  const text = createTextElement(\n    busBarName,\n    { x: absolutePosition.x, y: absolutePosition.y! - 10 },\n    'small'\n  );\n  groupElement.appendChild(text);\n\n  return groupElement;\n}\n\n/**\n * Create a Conducting Equipment element.\n * @param equipmentElement - The name of the busbar\n * @returns The Conducting Equipment SVG element.\n */\nexport function createConductingEquipmentElement(\n  equipmentElement: Element\n): SVGElement {\n  const groupElement = createGroupElement(equipmentElement);\n\n  const absolutePosition = getAbsolutePosition(equipmentElement);\n  const parsedIcon = new DOMParser().parseFromString(\n    getIcon(equipmentElement).strings[0],\n    'application/xml'\n  );\n  parsedIcon.querySelectorAll('circle,path,line').forEach(icon => {\n    icon.setAttribute(\n      'transform',\n      `translate(${absolutePosition.x},${absolutePosition.y})`\n    );\n    groupElement.appendChild(icon);\n  });\n\n  const text = createTextElement(\n    getNameAttribute(equipmentElement)!,\n    { x: absolutePosition.x! - 15, y: absolutePosition.y! + 30 },\n    'x-small'\n  );\n  groupElement.appendChild(text);\n\n  return groupElement;\n}\n\n/**\n * Create a PowerTransformer element.\n * @param powerTransformerElement - The SCL PowerTransformer element\n * @returns The Power Transformer SVG element.\n */\nexport function createPowerTransformerElement(\n  powerTransformerElement: Element\n): SVGElement {\n  const groupElement = createGroupElement(powerTransformerElement);\n\n  const absolutePosition = getAbsolutePosition(powerTransformerElement);\n  const parsedIcon = new DOMParser().parseFromString(\n    powerTransformerTwoWindingIcon.strings[0],\n    'application/xml'\n  );\n  parsedIcon.querySelectorAll('circle,path,line').forEach(icon => {\n    icon.setAttribute(\n      'transform',\n      `translate(${absolutePosition.x},${absolutePosition.y}) scale(1.5)`\n    );\n    groupElement.appendChild(icon);\n  });\n\n  const text = createTextElement(\n    getNameAttribute(powerTransformerElement)!,\n    { x: absolutePosition.x! - 15, y: absolutePosition.y! + 30 },\n    'x-small'\n  );\n  groupElement.appendChild(text);\n\n  return groupElement;\n}\n\n/**\n * Create a Connectivity Node element.\n * @param cNodeElement - The name of the busbar\n * @param position - The SCL position of the Connectivity Node.\n * @param clickAction - The action to execute when the terminal is being clicked.\n * @returns The Connectivity Node SVG element.\n */\nexport function createConnectivityNodeElement(\n  cNodeElement: Element,\n  position: Point,\n  clickAction: () => void\n): SVGElement {\n  const groupElement = createGroupElement(cNodeElement);\n\n  const parsedIcon = new DOMParser().parseFromString(\n    connectivityNodeIcon.strings[0],\n    'application/xml'\n  );\n  parsedIcon.querySelectorAll('circle').forEach(icon => {\n    icon.setAttribute('transform', `translate(${position.x},${position.y})`);\n    groupElement.appendChild(icon);\n  });\n\n  groupElement.addEventListener('click', clickAction);\n\n  return groupElement;\n}\n\n/**\n * Draw a route from the first point to the second point.\n * @param pointA - The first point of this connection.\n * @param pointB - The second point of this connection.\n * @param svgToDrawOn - The SVG to draw the route on.\n * @param shape - A custom shape defining custom height and width of the shapes.\n * @returns The sides where the routes are being drawn next to both points.\n */\nexport function drawRouteBetweenElements(\n  pointA: Point,\n  pointB: Point,\n  pointAShape: Shape,\n  pointBShape: Shape,\n  svgToDrawOn: HTMLElement,\n): PointSides {\n  /**\n   * The point on each side of the route should be in the middle of the element,\n   * so we have to do a little conversion of the 'left' and 'top' coordinate.\n   */\n  const positionMiddleOfA = convertRoutePointToMiddleOfElement(pointA, pointAShape);\n  const positionMiddleOfB = convertRoutePointToMiddleOfElement(pointB, pointBShape);\n\n  const shapeA = {\n    left: positionMiddleOfA.x!,\n    top: positionMiddleOfA.y!,\n    width: pointAShape?.width,\n    height: pointAShape?.height,\n  };\n\n  const shapeB = {\n    left: positionMiddleOfB.x!,\n    top: positionMiddleOfB.y!,\n    width: pointBShape?.width,\n    height: pointBShape?.height,\n  };\n\n  // Get the preferred sides.\n  const sides = getDirections(pointA, pointB);\n\n  const path = OrthogonalConnector.route({\n    pointA: { shape: shapeA, side: sides.pointASide, distance: 0.5 },\n    pointB: { shape: shapeB, side: sides.pointBSide, distance: 0.5 },\n    shapeMargin: 0,\n    globalBoundsMargin: 0,\n    globalBounds: {\n      left: 0,\n      top: 0,\n      width: 10000,\n      height: 10000,\n    },\n  });\n\n  const line = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n  let d = '';\n  path.forEach(({ x, y }, index) => {\n    if (index === 0) {\n      d = d + ` M ${x} ${y}`;\n    } else {\n      d = d + ` L ${x} ${y}`;\n    }\n  });\n\n  line.setAttribute('d', d);\n  line.setAttribute('fill', 'transparent');\n  line.setAttribute('stroke', 'currentColor');\n  line.setAttribute('stroke-width', '1.5');\n\n  // Inserting elements like this works kind of like z-index (not supported in SVG yet),\n  // these elements are placed behind all other elements.\n  // By doing it like this, all other elements are hoverable for example.\n  svgToDrawOn.insertAdjacentElement('afterbegin', line);\n\n  return sides;\n}\n\n/**\n * Get the dimensions of a specific element within a specific bay.\n * @param bayName - The name of the bay.\n * @param elementName - The name of the element.\n * @param svg - The SVG to search on.\n * @returns The shape (width and height) of the specific element.\n */\n export function getElementDimensions(bayName: string, elementName: string, svg: HTMLElement): Shape {\n  let {height, width} = {height: 0, width: 0};\n\n  svg.querySelectorAll(\n    `g[id=\"${bayName}\"] > g[id=\"${elementName}\"]`\n  ).forEach(b => {\n    height = b.getBoundingClientRect().height;\n    width = b.getBoundingClientRect().width;\n  });\n\n  return {height, width};\n}\n\n/**\n * Small simple algorithm deciding on which side the route should be drawn\n * of two ends of a route.\n * @param pointA - The first point (end) of a route.\n * @param pointB -  The second point (end) of a route.\n * @returns The of both points .\n */\nfunction getDirections(pointA: Point, pointB: Point): PointSides {\n  if (pointA.x! == pointB.x!) {\n    if (pointA.y! < pointB.y!) {\n      return { pointASide: 'bottom', pointBSide: 'top' };\n    } else {\n      return { pointASide: 'top', pointBSide: 'bottom' };\n    }\n  } else {\n    if (pointA.y! <= pointB.y!) {\n      if (pointA.x! < pointB.x!) {\n        return { pointASide: 'right', pointBSide: 'left' };\n      } else {\n        return { pointASide: 'left', pointBSide: 'right' };\n      }\n    } else {\n      if (pointA.x! < pointB.x!) {\n        return { pointASide: 'left', pointBSide: 'right' };\n      } else {\n        return { pointASide: 'right', pointBSide: 'left' };\n      }\n    }\n  }\n}\n\n/**\n * Get the absolute position for a Terminal, next to another point (based on the TERMINAL_OFFSET).\n * @param terminalParentPosition - The absolute position of the element which is the parent of the terminal.\n * @param side - On which side does the terminal needs to be placed relative to the given point.\n */\nfunction getAbsolutePositionTerminal(\n  terminalParentPosition: Point,\n  side: Side\n): Point {\n  switch (side) {\n    case 'top': {\n      const x = terminalParentPosition.x;\n      const y = terminalParentPosition.y;\n      return {\n        x: x! + DEFAULT_ELEMENT_SIZE / 2,\n        y: y! - TERMINAL_OFFSET,\n      };\n    }\n    case 'bottom': {\n      const x = terminalParentPosition.x;\n      const y = terminalParentPosition.y;\n      return {\n        x: x! + DEFAULT_ELEMENT_SIZE / 2,\n        y: y! + (DEFAULT_ELEMENT_SIZE + TERMINAL_OFFSET),\n      };\n    }\n    case 'left': {\n      const x = terminalParentPosition.x;\n      const y = terminalParentPosition.y;\n      return {\n        x: x! - TERMINAL_OFFSET,\n        y: y! + DEFAULT_ELEMENT_SIZE / 2,\n      };\n    }\n    case 'right': {\n      const x = terminalParentPosition.x;\n      const y = terminalParentPosition.y;\n      return {\n        x: x! + (DEFAULT_ELEMENT_SIZE + TERMINAL_OFFSET),\n        y: y! + DEFAULT_ELEMENT_SIZE / 2,\n      };\n    }\n    default: {\n      return terminalParentPosition;\n    }\n  }\n}\n\n/**\n * Convert a top left coordinate to the middle of an element.\n * @param point - The top left point of the element.\n * @param shape - The shape of the element.\n * @returns The point of the element in the middle.\n */\nfunction convertRoutePointToMiddleOfElement(point: Point, shape: Shape): Point {\n  return {\n    x: point.x! + ((DEFAULT_ELEMENT_SIZE - shape.width) / 2),\n    y: point.y! + ((DEFAULT_ELEMENT_SIZE - shape.height) / 2)\n  }\n}\n\n/* Calculate length of the busbar that is depending on the most far right equipment\n * @param root - Either the whole SCL file or the voltage level where the bus bar resides\n * @returns - the length of the bus bar\n */\nexport function getBusBarLength(root: Element | XMLDocument): number {\n  return (\n    Math.max(\n      ...Array.from(\n        root.querySelectorAll('ConductingEquipment, PowerTransformer')\n      ).map(equipment => getAbsolutePosition(equipment).x!)\n    ) + SVG_GRID_SIZE\n  );\n}\n"]}