{"version":3,"file":"foundation.js","sourceRoot":"","sources":["../../../../src/editors/singlelinediagram/foundation.ts"],"names":[],"mappings":"AAQA;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,OAAgB;IAC/C,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC1C,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;AACjC,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,uBAAuB,CAAC,OAAgB;IACtD,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC1C,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;AACjC,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,oBAAoB,CAAC,OAAgB;IACnD,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IAC9C,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;AACjC,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,OAAgB;IACrD,MAAM,CAAC,GAAG,OAAO,CAAC,cAAc,CAC9B,6CAA6C,EAC7C,GAAG,CACJ,CAAC;IACF,MAAM,CAAC,GAAG,OAAO,CAAC,cAAc,CAC9B,6CAA6C,EAC7C,GAAG,CACJ,CAAC;IAEF,OAAO;QACL,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACvB,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CAAC,OAAgB;IACrD,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,OAAO,CAAC,aAAa,EAAE,OAAO,KAAK,KAAK;QACpE,OAAO,sBAAsB,CAAC,OAAO,CAAC,CAAC;IAEzC,MAAM,SAAS,GAAG,sBAAsB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAChE,MAAM,UAAU,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;IACnD,OAAO;QACL,CAAC,EAAE,SAAS,CAAC,CAAE,GAAG,UAAU,CAAC,CAAE;QAC/B,CAAC,EAAE,SAAS,CAAC,CAAE,GAAG,UAAU,CAAC,CAAE;KAChC,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,QAAQ,CAAC,OAAgB;IACvC,OAAO,CACL,OAAO,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC;QAC7B,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,kBAAkB,CACnD,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,qBAAqB,CAAC,OAAgB;IACpD,MAAM,iBAAiB,GAAG,OAAO,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC;IACzD,IAAI,CAAC,iBAAiB;QAAE,OAAO,EAAE,CAAC;IAElC,MAAM,IAAI,GAAG,oBAAoB,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IACjD,MAAM,CAAC,cAAc,EAAE,gBAAgB,EAAE,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEpE,OAAO,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAC1E,QAAQ,CAAC,EAAE,CACT,QAAQ,CAAC,YAAY,CAAC,kBAAkB,CAAC,KAAK,IAAI;QAClD,QAAQ,CAAC,YAAY,CAAC,gBAAgB,CAAC,KAAK,cAAc;QAC1D,QAAQ,CAAC,YAAY,CAAC,kBAAkB,CAAC,KAAK,gBAAgB;QAC9D,QAAQ,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,OAAO;QAC5C,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,gBAAgB,CAAC,OAAO,CAAC,CACnE,CAAC;AACJ,CAAC;AAED;;;;;;;;;GASG;AACH,MAAM,UAAU,oCAAoC,CAClD,YAAqB;IAErB,qEAAqE;IACrE,IAAI,YAAY,CAAC,OAAO,IAAI,kBAAkB;QAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAEtE,MAAM,iBAAiB,GAAG,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC7D,MAAM,QAAQ,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;IAEpD,IAAI,eAAe,GAAG,CAAC,CAAC;IACxB,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,IAAI,MAAM,GAAG,CAAC,CAAC;IAEf,KAAK,CAAC,IAAI,CACR,iBAAkB,CAAC,gBAAgB,CAAC,uCAAuC,CAAC,CAC7E;SACE,MAAM,CACL,SAAS,CAAC,EAAE,CACV,SAAS,CAAC,aAAa,CAAC,8BAA8B,QAAQ,IAAI,CAAC;QACnE,IAAI,CACP;SACA,OAAO,CAAC,SAAS,CAAC,EAAE;QACnB,eAAe,EAAE,CAAC;QAElB,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,sBAAsB,CAAC,SAAS,CAAC,CAAC;QAEnD,MAAM,IAAI,CAAE,CAAC;QACb,MAAM,IAAI,CAAE,CAAC;IACf,CAAC,CAAC,CAAC;IAEL,OAAO;QACL,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,eAAe,CAAC;QACvC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,eAAe,CAAC;KACxC,CAAC;AACJ,CAAC","sourcesContent":["/**\n * A point is a position containing a x and a y within a SCL file.\n */\nexport interface Point {\n  x: number | undefined;\n  y: number | undefined;\n}\n\n/**\n * Extract the 'name' attribute from the given XML element.\n * @param element - The element to extract name from.\n * @returns the name, or a '-' if there is no name.\n */\nexport function getNameAttribute(element: Element): string | undefined {\n  const name = element.getAttribute('name');\n  return name ? name : undefined;\n}\n\n/**\n * Extract the 'desc' attribute from the given XML element.\n * @param element - The element to extract description from.\n * @returns the name, or a '-' if there is no description.\n */\nexport function getDescriptionAttribute(element: Element): string | undefined {\n  const name = element.getAttribute('desc');\n  return name ? name : undefined;\n}\n\n/**\n * Extract the 'pathName' attribute from the given XML element.\n * @param element - The element to extract path name from.\n * @returns the name, or a '-' if there is no path name.\n */\nexport function getPathNameAttribute(element: Element): string | undefined {\n  const name = element.getAttribute('pathName');\n  return name ? name : undefined;\n}\n\n/**\n * Get the coordinates of a XML element (x and y coordinates).\n * @param element - The element to extract coordinates from.\n * @returns A point containing the coordinates.\n */\nexport function getRelativeCoordinates(element: Element): Point {\n  const x = element.getAttributeNS(\n    'http://www.iec.ch/61850/2003/SCLcoordinates',\n    'x'\n  );\n  const y = element.getAttributeNS(\n    'http://www.iec.ch/61850/2003/SCLcoordinates',\n    'y'\n  );\n\n  return {\n    x: x ? parseInt(x) : 0,\n    y: y ? parseInt(y) : 0,\n  };\n}\n\n/**\n * Get the absolute (its own and all parents') coordinates of a SCL element (x and y coordinates)\n * @param element - The element to extract coordinates from.\n * @returns A point containing the coordinates.\n */\nexport function getAbsoluteCoordinates(element: Element): Point {\n  if (!element.parentElement || element.parentElement?.tagName === 'SCL')\n    return getRelativeCoordinates(element);\n\n  const absParent = getAbsoluteCoordinates(element.parentElement);\n  const relElement = getRelativeCoordinates(element);\n  return {\n    x: absParent.x! + relElement.x!,\n    y: absParent.y! + relElement.y!,\n  };\n}\n\n/**\n * Checking of an element is a BusBar or not.\n * @param element - The element to check.\n * @returns Is the element a BusBar or not.\n */\nexport function isBusBar(element: Element): boolean {\n  return (\n    element.children.length === 1 &&\n    element.children[0].tagName === 'ConnectivityNode'\n  );\n}\n\n/**\n * Get all the connected terminals to a given element.\n * @param element - The element to check.\n * @returns All connected terminals.\n */\nexport function getConnectedTerminals(element: Element): Element[] {\n  const substationElement = element?.closest('Substation');\n  if (!substationElement) return [];\n\n  const path = getPathNameAttribute(element) ?? '';\n  const [substationName, voltageLevelName, bayName] = path.split('/');\n\n  return Array.from(substationElement.getElementsByTagName('Terminal')).filter(\n    terminal =>\n      terminal.getAttribute('connectivityNode') === path &&\n      terminal.getAttribute('substationName') === substationName &&\n      terminal.getAttribute('voltageLevelName') === voltageLevelName &&\n      terminal.getAttribute('bayName') === bayName &&\n      terminal.getAttribute('cNodeName') === getNameAttribute(element)\n  );\n}\n\n/**\n * Calculate the SCL x and y coordinate of a Connectivity Node.\n * The algorithm is as follow:\n * - Get all elements that are connected to this Connectivity Node.\n * - Extract the SCL x and y coordinates of these Connectivity Nodes and add them up.\n * - Divide the final x and y numbers by the number of connected elements. This way, you get an so-called average.\n * @param doc - The full SCL document to scan for connected elements.\n * @param cNodePathName - The pathName of the Connectivity Node to calculate the SCL x and y coordinates.\n * @returns The calculated SCL x and y coordinates for this Connectivity Node.\n */\nexport function calculateConnectivityNodeCoordinates(\n  cNodeElement: Element\n): Point {\n  // If element is not a Connectivity Node, return default {x: 0, y: 0}\n  if (cNodeElement.tagName != 'ConnectivityNode') return { x: 0, y: 0 };\n\n  const substationElement = cNodeElement.closest('Substation');\n  const pathName = getPathNameAttribute(cNodeElement);\n\n  let nrOfConnections = 0;\n  let totalX = 0;\n  let totalY = 0;\n\n  Array.from(\n    substationElement!.querySelectorAll('ConductingEquipment, PowerTransformer')\n  )\n    .filter(\n      equipment =>\n        equipment.querySelector(`Terminal[connectivityNode=\"${pathName}\"]`) !=\n        null\n    )\n    .forEach(equipment => {\n      nrOfConnections++;\n\n      const { x, y } = getAbsoluteCoordinates(equipment);\n\n      totalX += x!;\n      totalY += y!;\n    });\n\n  return {\n    x: Math.round(totalX / nrOfConnections),\n    y: Math.round(totalY / nrOfConnections),\n  };\n}\n"]}