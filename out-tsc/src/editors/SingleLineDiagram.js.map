{"version":3,"file":"SingleLineDiagram.js","sourceRoot":"","sources":["../../../src/editors/SingleLineDiagram.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  css,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from 'lit-element';\n\nimport { identity, newWizardEvent, SCLTag } from '../foundation.js';\n\nimport panzoom from 'panzoom';\n\nimport { Side } from '../../public/js/ortho-connector.js';\nimport {\n  getAbsolutePosition,\n  drawRouteBetweenElements,\n  DEFAULT_ELEMENT_SIZE,\n  createTerminalElement,\n  createBusBarElement,\n  createVoltageLevelElement,\n  createBayElement,\n  createConductingEquipmentElement,\n  createConnectivityNodeElement,\n  getElementDimensions,\n  getAbsolutePositionConnectivityNode,\n  getBusBarLength,\n  createPowerTransformerElement,\n} from './singlelinediagram/sld-drawing.js';\nimport {\n  isBusBar,\n  getConnectedTerminals,\n  getPathNameAttribute,\n  getNameAttribute,\n} from './singlelinediagram/foundation.js';\nimport { wizards } from '../wizards/wizard-library.js';\n\n/**\n * Main class plugin for Single Line Diagram editor.\n */\nexport default class SingleLineDiagramPlugin extends LitElement {\n  // The full given XML document.\n  @property()\n  doc!: XMLDocument;\n\n  // Container for giving the panzoom to.\n  @query('#panzoom') panzoomContainer!: HTMLElement;\n\n  // The main canvas to draw everything on.\n  @query('#svg') svg!: HTMLElement;\n\n  /**\n   * Get all the BusBars from the document.\n   */\n  get busBars(): Element[] {\n    return Array.from(this.doc.querySelectorAll('Bay')).filter(bay =>\n      isBusBar(bay)\n    );\n  }\n\n  /**\n   * Get all the bays from the document.\n   */\n  get bays(): Element[] {\n    return Array.from(this.doc.querySelectorAll('Bay')).filter(\n      bay => !isBusBar(bay)\n    );\n  }\n\n  /**\n   * Get all the VoltageLevels from the SCL document.\n   */\n  get voltageLevels(): Element[] {\n    return Array.from(this.doc.querySelectorAll('VoltageLevel'));\n  }\n\n  /**\n   * Draw all available Voltage Levels of this SCL document.\n   * Should only be a <g> element.\n   */\n  drawVoltageLevels(): void {\n    this.voltageLevels.forEach(voltageLevel => {\n      const voltageLevelElement = createVoltageLevelElement(voltageLevel);\n      this.svg.appendChild(voltageLevelElement);\n    });\n  }\n\n  /**\n   * Draw all available Bays of this SCL document.\n   * Should only be a <g> element.\n   */\n  drawBays(): void {\n    this.bays.forEach(bay => {\n      const bayElement = createBayElement(bay);\n\n      this.addElementToGroup(bayElement, identity(bay.parentElement));\n    });\n  }\n\n  /**\n   * Draw all available `PowerTransformer`s of this SCL document.\n   * Should only be a <g> element.\n   */\n  drawPowerTransformers(): void {\n    Array.from(this.doc.querySelectorAll('PowerTransformer')).forEach(\n      powerTransformer => {\n        const powerTransformerElement =\n          createPowerTransformerElement(powerTransformer);\n\n        if (powerTransformer.parentElement?.tagName === 'Substation')\n          this.svg.appendChild(powerTransformerElement);\n        else\n          this.addElementToGroup(\n            powerTransformerElement,\n            identity(powerTransformer.parentElement)\n          );\n      }\n    );\n  }\n\n  /**\n   * Draw all available Conducting Equipments of this SCL document.\n   * Should only be a <g> element.\n   */\n  drawConductingEquipments(): void {\n    Array.from(this.doc.querySelectorAll('ConductingEquipment'))\n      .filter(\n        child =>\n          Array.from(child.querySelectorAll('Terminal')).filter(\n            terminal => terminal.getAttribute('cNodeName') !== 'grounded'\n          ).length !== 0\n      )\n      .forEach(equipment => {\n        const eqElement = createConductingEquipmentElement(equipment);\n\n        this.addElementToGroup(eqElement, identity(equipment.parentElement));\n      });\n  }\n\n  /**\n   * Draw all available Connectivity Nodes of this SCL document.\n   */\n  drawConnectivityNodes(): void {\n    this.bays.forEach(bay => {\n      Array.from(bay.querySelectorAll('ConnectivityNode'))\n        .filter(cNode => cNode.getAttribute('name') !== 'grounded')\n        .filter(cNode => getConnectedTerminals(cNode).length > 0)\n        .forEach(cNode => {\n          const cNodePosition = getAbsolutePositionConnectivityNode(cNode);\n          const cNodeElement = createConnectivityNodeElement(\n            cNode,\n            cNodePosition,\n            () => this.openEditWizard(cNode)\n          );\n\n          this.addElementToGroup(cNodeElement, identity(cNode.parentElement));\n        });\n    });\n  }\n\n  /**\n   * Draw all available Bus Bars of this SCL document.\n   */\n  drawBusBars(): void {\n    this.busBars.forEach(busBar => {\n      const busBarElement = createBusBarElement(\n        busBar,\n        getBusBarLength(busBar.parentElement ?? this.doc)\n      );\n\n      this.addElementToGroup(busBarElement, identity(busBar.parentElement));\n    });\n  }\n\n  drawConnectivityNodeConnections(): void {\n    this.bays.forEach(bay => {\n      Array.from(bay.querySelectorAll('ConnectivityNode'))\n        .filter(cNode => cNode.getAttribute('name') !== 'grounded')\n        .forEach(cNode => {\n          // For each Connectivity Node, the routes must be drawn.\n          const cNodeAbsolutePosition = getAbsolutePositionConnectivityNode(cNode);\n          const cNodeDimensions = getElementDimensions(getNameAttribute(bay)!, getNameAttribute(cNode)!, this.svg);\n\n          // Get all the connected Conducting Equipments to this specific Connectivity Node..\n          Array.from(this.doc.querySelectorAll('ConductingEquipment,PowerTransformer'))\n            .filter(cEquipment =>\n              cEquipment.querySelector(\n                `Terminal[connectivityNode=\"${cNode.getAttribute('pathName')}\"]`\n              )\n            )\n            .forEach(cEquipment => {\n              const cEquipmentAbsolutePosition = getAbsolutePosition(cEquipment);\n              let sideToDrawTerminalOn: Side;\n\n              /**\n               * TODO: ConductingEquipment dimensions are just the defaults,\n               * retrieving dimensions the same way as for ConnectivityNode doesn't work.\n               * \n               * Instead, just insert DEFAULT_ELEMENT_SIZE for height and width for ConductingEquipment.\n               */\n              if (cEquipmentAbsolutePosition.y! > cNodeAbsolutePosition.y!) {\n                const sidesOfRoutes = drawRouteBetweenElements(\n                  cNodeAbsolutePosition,\n                  cEquipmentAbsolutePosition,\n                  cNodeDimensions,\n                  {\n                    height: DEFAULT_ELEMENT_SIZE,\n                    width: DEFAULT_ELEMENT_SIZE\n                  },\n                  this.svg\n                );\n                sideToDrawTerminalOn = sidesOfRoutes.pointBSide;\n              } else {\n                const sidesOfRoutes = drawRouteBetweenElements(\n                  cEquipmentAbsolutePosition,\n                  cNodeAbsolutePosition,\n                  {\n                    height: DEFAULT_ELEMENT_SIZE,\n                    width: DEFAULT_ELEMENT_SIZE\n                  },\n                  cNodeDimensions,\n                  this.svg\n                );\n                sideToDrawTerminalOn = sidesOfRoutes.pointASide;\n              }\n\n              /**\n               * Add the terminal belonging to the connected Conducting Equipment.\n               */\n              const terminalElement = cEquipment.querySelector(\n                `Terminal[connectivityNode=\"${cNode.getAttribute('pathName')}\"]`\n              );\n\n              // Create the Terminal SVG element and add it to the Conducting Equipment group.\n              const terminal = createTerminalElement(\n                cEquipmentAbsolutePosition,\n                sideToDrawTerminalOn,\n                terminalElement!,\n                () => this.openEditWizard(terminalElement!)\n              );\n\n              this.svg\n                .querySelectorAll(`g[id=\"${identity(cEquipment)}\"]`)\n                .forEach(eq => eq.appendChild(terminal));\n            });\n        });\n    });\n  }\n\n  drawBusBarConnections(): void {\n    this.busBars.forEach(busBar => {\n      const pathName = getPathNameAttribute(busBar.children[0]);\n      const busBarPosition = getAbsolutePosition(busBar);\n\n      Array.from(this.doc.querySelectorAll('ConductingEquipment'))\n        .filter(cEquipment =>\n          cEquipment.querySelector(`Terminal[connectivityNode=\"${pathName}\"]`)\n        )\n        .forEach(cEquipment => {\n          const cEquipmentAbsolutePosition = getAbsolutePosition(cEquipment);\n\n          let sideToDrawTerminalOn: Side;\n\n          // Height of busbar shape should be 1, because it's smaller.\n          const customShape = { width: DEFAULT_ELEMENT_SIZE, height: 1 };\n\n          if (busBarPosition.y! > cEquipmentAbsolutePosition.y!) {\n            const sidesOfRoutes = drawRouteBetweenElements(\n              cEquipmentAbsolutePosition,\n              // The x of the busbar position should equal the x of the Conducting Equipment,\n              // so it will be a straight line.\n              {\n                x: cEquipmentAbsolutePosition.x!,\n                // The drawRoute function draws the routes to the middle of the elements,\n                // for the Bus Bar the height is 1, so we extract the value that is added in the function.\n                y: busBarPosition.y! - ((DEFAULT_ELEMENT_SIZE - customShape.height) / 2)\n              },\n              customShape,\n              customShape,\n              this.svg,\n            );\n            sideToDrawTerminalOn = sidesOfRoutes.pointASide;\n          } else {\n            const sidesOfRoutes = drawRouteBetweenElements(\n              {\n                x: cEquipmentAbsolutePosition.x!,\n                y: busBarPosition.y! - ((DEFAULT_ELEMENT_SIZE - customShape.height) / 2)\n              },\n              cEquipmentAbsolutePosition,\n              customShape,\n              customShape,\n              this.svg,\n            );\n            sideToDrawTerminalOn = sidesOfRoutes.pointBSide;\n          }\n\n          /**\n           * Add the terminal belonging to the connected Conducting Equipment.\n           */\n          const terminalElement = cEquipment.querySelector(\n            `Terminal[connectivityNode=\"${pathName}\"]`\n          );\n          \n          const terminal = createTerminalElement(\n            cEquipmentAbsolutePosition,\n            sideToDrawTerminalOn,\n            terminalElement!,\n            () => this.openEditWizard(terminalElement!)\n          );\n\n          this.svg\n            .querySelectorAll(`g[id=\"${identity(cEquipment)}\"]`)\n            .forEach(eq => eq.appendChild(terminal));\n        });\n    });\n  }\n\n  /**\n   * Draw all the Substation elements.\n   */\n  drawSubstationElements(): void {\n    this.drawVoltageLevels();\n    this.drawBays();\n    this.drawConductingEquipments();\n    this.drawPowerTransformers();\n    this.drawConnectivityNodes();\n    this.drawBusBars();\n    \n    this.drawConnectivityNodeConnections();\n    this.drawBusBarConnections();\n  }\n\n  /**\n   * Add an element to a specific <g> element.\n   * @param elementToAdd - The element to add.\n   * @param groupName - Identity sting if the element\n   */\n  addElementToGroup(elementToAdd: Element, identity: string | number): void {\n    this.svg\n      .querySelectorAll(`g[id=\"${identity}\"]`)\n      .forEach(group => group.appendChild(elementToAdd));\n  }\n\n  /**\n   * Open an Edit wizard for an element.\n   * @param element - The element to show the wizard for.\n   */\n  openEditWizard(element: Element): void {\n    const wizard = wizards[<SCLTag>(element.tagName)].edit(element);\n    if (wizard) this.dispatchEvent(newWizardEvent(wizard));\n  }\n\n  firstUpdated(): void {\n    panzoom(this.panzoomContainer);\n    this.drawSubstationElements();\n  }\n\n  render(): TemplateResult {\n    // TODO: Width and Height should be a percentage, not fixed height/width.\n    return html`<div class=\"sldContainer\">\n      <div id=\"panzoom\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          id=\"svg\"\n          width=\"5000\"\n          height=\"5000\"\n        ></svg>\n      </div>\n    </div>`;\n  }\n\n  static styles = css`\n    .sldContainer {\n      overflow: hidden;\n    }\n\n    g[type='ConnectivityNode']:hover, g[type='Terminal']:hover {\n      outline: 2px dashed var(--mdc-theme-primary);\n      transition: transform 200ms linear, box-shadow 250ms linear;\n    }\n  `;\n}\n"]}