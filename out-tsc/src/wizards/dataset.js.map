{"version":3,"file":"dataset.js","sourceRoot":"","sources":["../../../src/wizards/dataset.ts"],"names":[],"mappings":"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","sourcesContent":["import { CheckListItem } from '@material/mwc-list/mwc-check-list-item';\nimport { html } from 'lit-element';\nimport { get, translate } from 'lit-translate';\n\nimport {\n  cloneElement,\n  getValue,\n  identity,\n  newWizardEvent,\n  selector,\n  Update,\n  Wizard,\n  WizardAction,\n  WizardActor,\n  WizardInput,\n} from '../foundation.js';\nimport { wizards } from './wizard-library.js';\n\nfunction updateDataSetAction(element: Element): WizardActor {\n  return (inputs: WizardInput[], wizard: Element): WizardAction[] => {\n    const name = inputs.find(i => i.label === 'name')!.value!;\n    const desc = getValue(inputs.find(i => i.label === 'desc')!);\n    const oldName = element.getAttribute('name');\n\n    const dataSetUpdateAction: Update[] = [];\n    if (!(name === oldName && desc === element.getAttribute('desc'))) {\n      const newElement = cloneElement(element, { name, desc });\n\n      dataSetUpdateAction.push({\n        old: { element },\n        new: { element: newElement },\n      });\n    }\n\n    const controlBlockUpdateActions =\n      name !== oldName\n        ? Array.from(\n            element.parentElement?.querySelectorAll(\n              `ReportControlBock[datSet=${oldName}], GSEControl[datSet=${oldName}],SampledValueControl[datSet=${oldName}] `\n            ) ?? []\n          ).map(cb => {\n            const newCb = cloneElement(cb, { datSet: name });\n            return { old: { element: cb }, new: { element: newCb } };\n          })\n        : [];\n\n    const fCDARemoveActions = Array.from(\n      wizard.shadowRoot!.querySelectorAll(\n        'filtered-list > mwc-check-list-item:not([selected])'\n      )\n    )\n      .map(listItem =>\n        element.querySelector(selector('FCDA', (<CheckListItem>listItem).value))\n      )\n      .filter(fcda => fcda)\n      .map(fcda => {\n        return {\n          old: {\n            parent: element,\n            element: fcda!,\n            reference: fcda!.nextSibling,\n          },\n        };\n      });\n\n    return [\n      ...fCDARemoveActions,\n      ...dataSetUpdateAction,\n      ...controlBlockUpdateActions,\n    ];\n  };\n}\n\nexport function editDataSetWizard(element: Element): Wizard {\n  const name = element.getAttribute('name');\n  const desc = element.getAttribute('desc');\n\n  return [\n    {\n      title: get('wizard.title.edit', { tagName: element.tagName }),\n      element,\n      primary: {\n        label: get('edit'),\n        icon: 'save',\n        action: updateDataSetAction(element),\n      },\n      content: [\n        html`<wizard-textfield\n          label=\"name\"\n          .maybeValue=${name}\n          helper=\"${translate('scl.name')}\"\n          required\n        >\n        </wizard-textfield>`,\n        html`<wizard-textfield\n          label=\"desc\"\n          .maybeValue=${desc}\n          helper=\"${translate('scl.desc')}\"\n          nullable\n          required\n        >\n        </wizard-textfield>`,\n        html`<mwc-button\n          icon=\"add\"\n          label=\"${translate('wizard.title.add', { tagName: 'FCDA' })}\"\n          @click=${(e: Event) => {\n            const wizard = wizards['FCDA'].create(element);\n            if (wizard) {\n              e.target?.dispatchEvent(newWizardEvent(wizard));\n              e.target?.dispatchEvent(newWizardEvent());\n            }\n          }}\n        ></mwc-button>`,\n        html`<filtered-list multi\n          >${Array.from(element.querySelectorAll('FCDA')).map(\n            fcda =>\n              html`<mwc-check-list-item selected value=\"${identity(fcda)}\"\n                >${(<string>identity(fcda)).split('>')[4]}</mwc-check-list-item\n              >`\n          )}</filtered-list\n        >`,\n      ],\n    },\n  ];\n}\n"]}