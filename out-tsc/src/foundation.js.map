{"version":3,"file":"foundation.js","sourceRoot":"","sources":["../../src/foundation.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, TemplateResult } from 'lit-element';\nimport { directive, Part } from 'lit-html';\n\nimport { WizardTextField } from './wizard-textfield.js';\nimport { Select } from '@material/mwc-select';\n\n/** Represents a change to some `Element`. */\nexport type EditorAction = Create | Update | Delete | Move;\n/** Represents prepending `create.new.element` to `create.new.parent`. */\nexport interface Create {\n  new: { parent: Element; element: Element; reference: Element | null };\n  derived?: boolean;\n}\n/** Represents removal of `delete.old.element`. */\nexport interface Delete {\n  old: { parent: Element; element: Element; reference: Element | null };\n  derived?: boolean;\n}\n/** Represents reparenting of `move.old.element` to `move.new.parent`. */\nexport interface Move {\n  old: { parent: Element; element: Element; reference: Element | null };\n  new: { parent: Element; reference: Element | null };\n  derived?: boolean;\n}\n/** Represents replacement of `update.old.element` by `update.new.element`. */\nexport interface Update {\n  old: { element: Element };\n  new: { element: Element };\n  derived?: boolean;\n}\n\n// typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\nexport function isCreate(action: EditorAction): action is Create {\n  return (\n    (action as Update).old === undefined &&\n    (action as Create).new?.parent !== undefined &&\n    (action as Create).new?.element !== undefined &&\n    (action as Create).new?.reference !== undefined\n  );\n}\nexport function isDelete(action: EditorAction): action is Delete {\n  return (\n    (action as Delete).old?.parent !== undefined &&\n    (action as Delete).old?.element !== undefined &&\n    (action as Delete).old?.reference !== undefined &&\n    (action as Update).new === undefined\n  );\n}\nexport function isMove(action: EditorAction): action is Move {\n  return (\n    (action as Move).old?.parent !== undefined &&\n    (action as Move).old?.element !== undefined &&\n    (action as Move).old?.reference !== undefined &&\n    (action as Move).new?.parent !== undefined &&\n    (action as Update).new?.element == undefined &&\n    (action as Move).new?.reference !== undefined\n  );\n}\nexport function isUpdate(action: EditorAction): action is Update {\n  return (\n    (action as Move).old?.parent === undefined &&\n    (action as Update).old?.element !== undefined &&\n    (action as Move).new?.parent === undefined &&\n    (action as Update).new?.element !== undefined\n  );\n}\n\n/** Returns the inverse of `action`, i.e. an `EditorAction` with opposite effect. */\nexport function invert(action: EditorAction): EditorAction {\n  if (isCreate(action)) return { old: action.new, derived: action.derived };\n  else if (isDelete(action))\n    return { new: action.old, derived: action.derived };\n  else if (isMove(action))\n    return {\n      old: {\n        parent: action.new.parent,\n        element: action.old.element,\n        reference: action.new.reference,\n      },\n      new: { parent: action.old.parent, reference: action.old.reference },\n    };\n  else if (isUpdate(action))\n    return { new: action.old, old: action.new, derived: action.derived };\n  else return unreachable('Unknown EditorAction type in invert.');\n}\n\n/** Represents some modification of a `Document` being edited. */\nexport interface EditorActionDetail<T extends EditorAction> {\n  action: T;\n}\nexport type EditorActionEvent<T extends EditorAction> = CustomEvent<\n  EditorActionDetail<T>\n>;\nexport function newActionEvent<T extends EditorAction>(\n  action: T,\n  eventInitDict?: CustomEventInit<EditorActionDetail<T>>\n): EditorActionEvent<T> {\n  return new CustomEvent<EditorActionDetail<T>>('editor-action', {\n    bubbles: true,\n    composed: true,\n    detail: { action },\n    ...eventInitDict,\n  });\n}\n\nexport type CloseableElement = HTMLElement & { close: () => void };\n\nexport const wizardInputSelector = 'wizard-textfield, mwc-select';\n\nexport type WizardInput = WizardTextField | Select;\nexport type WizardAction = (\n  inputs: WizardInput[],\n  wizard: CloseableElement\n) => EditorAction[];\n\nexport function getValue(input: WizardInput): string | null {\n  if (input instanceof WizardTextField) return input.maybeValue;\n  else return input.value;\n}\n\nexport function getMultiplier(input: WizardInput): string | null {\n  if (input instanceof WizardTextField) return input.multiplier;\n  else return null;\n}\n\n/** Represents a page of a wizard dialog */\nexport interface WizardPage {\n  title: string;\n  content?: TemplateResult[];\n  primary?: {\n    icon: string;\n    label: string;\n    action: WizardAction;\n  };\n  secondary?: {\n    icon: string;\n    label: string;\n    action: WizardAction;\n  };\n}\nexport type Wizard = WizardPage[];\n\nexport interface WizardDetail {\n  wizard: Wizard | null;\n}\nexport type WizardEvent = CustomEvent<WizardDetail>;\nexport function newWizardEvent(\n  wizard: Wizard | null = null,\n  eventInitDict?: CustomEventInit<WizardDetail>\n): WizardEvent {\n  return new CustomEvent<WizardDetail>('wizard', {\n    bubbles: true,\n    composed: true,\n    detail: { wizard },\n    ...eventInitDict,\n  });\n}\n\ntype InfoEntryKind = 'info' | 'warning' | 'error';\ninterface LogDetailBase {\n  title: string;\n  message?: string;\n}\nexport interface CommitDetail extends LogDetailBase {\n  kind: 'action';\n  action: EditorAction;\n}\nexport interface InfoDetail extends LogDetailBase {\n  kind: InfoEntryKind;\n  cause?: LogEntry;\n}\n\nexport type LogDetail = InfoDetail | CommitDetail;\nexport type LogEvent = CustomEvent<LogDetail>;\nexport function newLogEvent(\n  detail: LogDetail,\n  eventInitDict?: CustomEventInit<LogDetail>\n): LogEvent {\n  return new CustomEvent<LogDetail>('log', {\n    bubbles: true,\n    composed: true,\n    detail: detail,\n    ...eventInitDict,\n  });\n}\n\ninterface Timestamped {\n  time: Date;\n}\n\nexport type CommitEntry = Timestamped & CommitDetail;\nexport type InfoEntry = Timestamped & InfoDetail;\n\nexport type LogEntry = InfoEntry | CommitEntry;\n\n/** Represents some work pending completion, upon which `promise` resolves. */\nexport interface PendingStateDetail {\n  promise: Promise<string>;\n}\nexport type PendingStateEvent = CustomEvent<PendingStateDetail>;\nexport function newPendingStateEvent(\n  promise: Promise<string>,\n  eventInitDict?: CustomEventInit<PendingStateDetail>\n): PendingStateEvent {\n  return new CustomEvent<PendingStateDetail>('pending-state', {\n    bubbles: true,\n    composed: true,\n    detail: { promise },\n    ...eventInitDict,\n  });\n}\n\n/** Useful `lit-html` directives */\nexport const ifImplemented = directive(rendered => (part: Part) => {\n  if (Object.keys(rendered).length) part.setValue(rendered);\n  else part.setValue('');\n});\n\n/** Throws an error bearing `message`, never returning. */\nexport function unreachable(message: string): never {\n  throw new Error(message);\n}\n\n/** Constructor type for defining `HTMLElement` mixins. */\nexport type LitElementConstructor = new (...args: any[]) => LitElement;\n\n/** The type returned by `MyMixin(...)` is `Mixin<typeof MyMixin>`. */\nexport type Mixin<T extends (...args: any[]) => any> = InstanceType<\n  ReturnType<T>\n>;\n\ndeclare global {\n  interface ElementEventMap {\n    ['pending-state']: PendingStateEvent;\n    ['editor-action']: EditorActionEvent<EditorAction>;\n    ['wizard']: WizardEvent;\n    ['log']: LogEvent;\n  }\n  interface HTMLElement {\n    // Extended for other mixins to be able to use `Logging` mixin.\n    info?(message: string, ...data: any[]): void;\n    warn?(message: string, ...data: any[]): void;\n  }\n}\n"]}