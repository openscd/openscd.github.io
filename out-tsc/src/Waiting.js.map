{"version":3,"file":"Waiting.js","sourceRoot":"","sources":["../../src/Waiting.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAkB,MAAM,aAAa,CAAC;AAE7D,OAAO,4CAA4C,CAAC;AAEpD,OAAO,EAIL,aAAa,EACb,WAAW,GACZ,MAAM,iBAAiB,CAAC;AAIzB,MAAM,UAAU,OAAO,CAAsC,IAAW;IACtE,MAAM,cAAe,SAAQ,IAAI;QAqB/B,YAAY,GAAG,IAAW;YACxB,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC;YArBjB,oEAAoE;YAEpE,YAAO,GAAG,KAAK,CAAC;YAEhB,SAAI,GAAyB,IAAI,GAAG,EAAE,CAAC;YACvC,wEAAwE;YACxE,aAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAiBvC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrD,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC9D,CAAC;QAjBD,KAAK,CAAC,cAAc,CAAC,CAAkC;YACrD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAChC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CACzB,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,EACpE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,CACxE,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;QACpC,CAAC;QASD,MAAM;YACJ,OAAO,IAAI,CAAA,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;;oBAE7B,CAAC,IAAI,CAAC,OAAO;;6CAEY,CAAC;QAC1C,CAAC;KACF;IAhCC;QADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;mDACZ;IAkClB,OAAO,cAAc,CAAC;AACxB,CAAC","sourcesContent":["import { html, property, TemplateResult } from 'lit-element';\n\nimport '@material/mwc-circular-progress-four-color';\n\nimport {\n  LitElementConstructor,\n  Mixin,\n  PendingStateDetail,\n  ifImplemented,\n  newLogEvent,\n} from './foundation.js';\n\nexport type WaitingElement = Mixin<typeof Waiting>;\n\nexport function Waiting<TBase extends LitElementConstructor>(Base: TBase) {\n  class WaitingElement extends Base {\n    /** Whether the element is currently waiting for some async work. */\n    @property({ type: Boolean })\n    waiting = false;\n\n    work: Set<Promise<string>> = new Set();\n    /** A promise which resolves once all currently pending work is done. */\n    workDone = Promise.allSettled(this.work);\n\n    async onPendingState(e: CustomEvent<PendingStateDetail>) {\n      this.waiting = true;\n      this.work.add(e.detail.promise);\n      this.workDone = Promise.allSettled(this.work);\n      await e.detail.promise.then(\n        msg => this.dispatchEvent(newLogEvent({ kind: 'info', title: msg })),\n        msg => this.dispatchEvent(newLogEvent({ kind: 'warning', title: msg }))\n      );\n      this.work.delete(e.detail.promise);\n      this.waiting = this.work.size > 0;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      this.onPendingState = this.onPendingState.bind(this);\n      this.addEventListener('pending-state', this.onPendingState);\n    }\n\n    render(): TemplateResult {\n      return html`${ifImplemented(super.render())}\n        <mwc-circular-progress-four-color\n          .closed=${!this.waiting}\n          indeterminate\n        ></mwc-circular-progress-four-color>`;\n    }\n  }\n\n  return WaitingElement;\n}\n"]}