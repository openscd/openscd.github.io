{"version":3,"file":"Validating.js","sourceRoot":"","sources":["../../src/Validating.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;AAEpC,OAAO,EAAgC,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAC5E,OAAO,EACL,SAAS,EACT,kBAAkB,EAClB,iBAAiB,EACjB,kBAAkB,GAInB,MAAM,cAAc,CAAC;AAEtB,MAAM,UAAU,GAAuC,EAAE,CAAC;AAI1D,MAAM,UAAU,UAAU,CAAsC,IAAW;IACzE,MAAM,iBAAkB,SAAQ,IAAI;QAApC;;YAEE,cAAS,GAA8B,OAAO,CAAC,OAAO,CAAC;gBACrD,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,CAAC;aACR,CAAC,CAAC;QAwGL,CAAC;QAtGC,KAAK,CAAC,QAAQ,CACZ,GAAgB,EAChB,EACE,OAAO,GAAG,MAAM,EAChB,QAAQ,GAAG,GAAG,EACd,OAAO,GAAG,GAAG,EACb,QAAQ,GAAG,cAAc,GAC1B,GAAG,EAAE;YAEN,IAAI,GAAG,CAAC,eAAe;gBACrB,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,GAAG;oBAC7B,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE;oBACjD,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,EAAE;oBAClD,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE;iBAClD,CAAC;YACJ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAChC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,EACrC,KAAK,GAAG,OAAO,GAAG,QAAQ,GAAG,OAAO,GAAG,MAAM,CAC9C,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CACjB,SAAS,CAAC,IAAI,aAAa,EAAE,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE,QAAQ,CAAC,CAChE,CAAC;YACF,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE;gBACjC,IAAI,CAAC,aAAa,CAChB,WAAW,CAAC;oBACV,IAAI,EAAE,SAAS;oBACf,KAAK,EAAE,GAAG,CAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;iBACrD,CAAC,CACH,CAAC;gBACF,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;aAChE;YAED,IAAI,CAAC,aAAa,CAChB,WAAW,CAAC;gBACV,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,GAAG,CAAC,kBAAkB,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;aACnD,CAAC,CACH,CAAC;YACF,OAAO;QACT,CAAC;QAEO,KAAK,CAAC,YAAY,CACxB,GAAW,EACX,OAAe;YAEf,IAAI,CAAC,MAAM,CAAC,MAAM;gBAAE,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAC7D,IAAI,UAAU,CAAC,OAAO,CAAC;gBAAE,OAAO,UAAU,CAAC,OAAO,CAAE,CAAC;YAErD,MAAM,MAAM,GAAW,IAAI,MAAM,CAAC,qBAAqB,CAAC,CAAC;YAEzD,KAAK,UAAU,QAAQ,CACrB,GAAW,EACX,OAAe;gBAEf,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAC3B,MAAM,CAAC,gBAAgB,CACrB,SAAS,EACT,CAAC,CAA8B,EAAE,EAAE;wBACjC,IAAI,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO;4BACvD,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBACpB,CAAC,CACF,CAAC;oBACF,MAAM,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;gBACtD,CAAC,CAAC,CAAC;YACL,CAAC;YAED,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACrC,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,CAA8B,EAAE,EAAE;oBACpE,IAAI,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;wBAC9B,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM;4BAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;;4BAChC,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;qBAChE;yBAAM,IAAI,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;wBACpC,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;wBAC5C,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;wBACnD,MAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;wBAC3D,IAAI,CAAC,aAAa,CAChB,WAAW,CAAC;4BACV,KAAK,EAAE,WAAW;4BAClB,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAS;4BAC5C,OAAO,EACL,CAAC,CAAC,IAAI,CAAC,IAAI;gCACX,GAAG;gCACH,CAAC,CAAC,IAAI,CAAC,IAAI;gCACX,GAAG;gCACH,CAAC,CAAC,IAAI,CAAC,IAAI;gCACX,GAAG;gCACH,CAAC,CAAC,IAAI,CAAC,IAAI;gCACX,YAAY;yBACf,CAAC,CACH,CAAC;qBACH;yBAAM,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE;wBACtC,IAAI,CAAC,aAAa,CAChB,WAAW,CAAC;4BACV,KAAK,EAAE,GAAG,CAAC,kBAAkB,CAAC;4BAC9B,IAAI,EAAE,OAAO;4BACb,OAAO,EAAE,CAAC,CAAC,IAAI;yBAChB,CAAC,CACH,CAAC;qBACH;gBACH,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,WAAW,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YACtD,CAAC,CAAC,CAAC;QACL,CAAC;KACF;IA5GC;QADC,QAAQ,EAAE;wDAKR;IA0GL,OAAO,iBAAiB,CAAC;AAC3B,CAAC","sourcesContent":["import { property } from 'lit-element';\nimport { get } from 'lit-translate';\n\nimport { LitElementConstructor, Mixin, newLogEvent } from './foundation.js';\nimport {\n  getSchema,\n  isLoadSchemaResult,\n  isValidationError,\n  isValidationResult,\n  ValidationResult,\n  Validator,\n  WorkerMessage,\n} from './schemas.js';\n\nconst validators: Partial<Record<string, Validator>> = {};\n\nexport type ValidatingElement = Mixin<typeof Validating>;\n\nexport function Validating<TBase extends LitElementConstructor>(Base: TBase) {\n  class ValidatingElement extends Base {\n    @property()\n    validated: Promise<ValidationResult> = Promise.resolve({\n      file: 'untitled.scd',\n      valid: true,\n      code: 0,\n    });\n\n    async validate(\n      doc: XMLDocument,\n      {\n        version = '2007',\n        revision = 'B',\n        release = '1',\n        fileName = 'untitled.scd',\n      } = {}\n    ): Promise<void> {\n      if (doc.documentElement)\n        [version, revision, release] = [\n          doc.documentElement.getAttribute('version') ?? '',\n          doc.documentElement.getAttribute('revision') ?? '',\n          doc.documentElement.getAttribute('release') ?? '',\n        ];\n      this.validated = this.getValidator(\n        getSchema(version, revision, release),\n        'SCL' + version + revision + release + '.xsd'\n      ).then(validator =>\n        validator(new XMLSerializer().serializeToString(doc), fileName)\n      );\n      if (!(await this.validated).valid) {\n        this.dispatchEvent(\n          newLogEvent({\n            kind: 'warning',\n            title: get('validating.invalid', { name: fileName }),\n          })\n        );\n        throw new Error(get('validating.invalid', { name: fileName }));\n      }\n\n      this.dispatchEvent(\n        newLogEvent({\n          kind: 'info',\n          title: get('validating.valid', { name: fileName }),\n        })\n      );\n      return;\n    }\n\n    private async getValidator(\n      xsd: string,\n      xsdName: string\n    ): Promise<Validator> {\n      if (!window.Worker) throw new Error(get('validating.fatal'));\n      if (validators[xsdName]) return validators[xsdName]!;\n\n      const worker: Worker = new Worker('public/js/worker.js');\n\n      async function validate(\n        xml: string,\n        xmlName: string\n      ): Promise<ValidationResult> {\n        return new Promise(resolve => {\n          worker.addEventListener(\n            'message',\n            (e: MessageEvent<WorkerMessage>) => {\n              if (isValidationResult(e.data) && e.data.file === xmlName)\n                resolve(e.data);\n            }\n          );\n          worker.postMessage({ content: xml, name: xmlName });\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        worker.addEventListener('message', (e: MessageEvent<WorkerMessage>) => {\n          if (isLoadSchemaResult(e.data)) {\n            if (e.data.loaded) resolve(validate);\n            else reject(get('validating.loadEror', { name: e.data.file }));\n          } else if (isValidationError(e.data)) {\n            const parts = e.data.message.split(': ', 2);\n            const description = parts[1] ? parts[1] : parts[0];\n            const qualifiedTag = parts[1] ? ' (' + parts[0] + ')' : '';\n            this.dispatchEvent(\n              newLogEvent({\n                title: description,\n                kind: e.data.level > 1 ? 'error' : 'warning',\n                message:\n                  e.data.file +\n                  ':' +\n                  e.data.line +\n                  ' ' +\n                  e.data.node +\n                  ' ' +\n                  e.data.part +\n                  qualifiedTag,\n              })\n            );\n          } else if (!isValidationResult(e.data)) {\n            this.dispatchEvent(\n              newLogEvent({\n                title: get('validating.fatal'),\n                kind: 'error',\n                message: e.data,\n              })\n            );\n          }\n        });\n        worker.postMessage({ content: xsd, name: xsdName });\n      });\n    }\n  }\n\n  return ValidatingElement;\n}\n"]}