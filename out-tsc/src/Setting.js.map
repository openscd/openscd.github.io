{"version":3,"file":"Setting.js","sourceRoot":"","sources":["../../src/Setting.ts"],"names":[],"mappings":"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","sourcesContent":["import { html, property, query, TemplateResult } from 'lit-element';\nimport { registerTranslateConfig, translate, use } from 'lit-translate';\n\nimport '@material/mwc-dialog';\nimport '@material/mwc-formfield';\nimport '@material/mwc-list/mwc-list-item';\nimport '@material/mwc-select';\nimport '@material/mwc-switch';\nimport { Dialog } from '@material/mwc-dialog';\nimport { Select } from '@material/mwc-select';\nimport { Switch } from '@material/mwc-switch';\n\nimport { ifImplemented, LitElementConstructor, Mixin } from './foundation.js';\nimport { Language, languages, loader } from './translations/loader.js';\n\nexport type Settings = {\n  language: Language;\n  theme: 'light' | 'dark';\n};\nexport const defaults: Settings = { language: 'en', theme: 'light' };\n\nexport type SettingElement = Mixin<typeof Setting>;\n\nexport function Setting<TBase extends LitElementConstructor>(Base: TBase) {\n  class SettingElement extends Base {\n    @property()\n    get settings(): Settings {\n      return {\n        language: this.getSetting('language'),\n        theme: this.getSetting('theme'),\n      };\n    }\n    @query('#settings')\n    settingsUI!: Dialog;\n    @query('#language')\n    languageUI!: Select;\n    @query('#dark')\n    darkThemeUI!: Switch;\n\n    private getSetting<T extends keyof Settings>(setting: T): Settings[T] {\n      return (\n        <Settings[T] | null>localStorage.getItem(setting) ?? defaults[setting]\n      );\n    }\n    setSetting<T extends keyof Settings>(setting: T, value: Settings[T]): void {\n      localStorage.setItem(setting, <string>(<unknown>value));\n      this.requestUpdate();\n    }\n\n    onClosing(ae: CustomEvent<{ action: string } | null>): void {\n      if (ae.detail?.action === 'reset') {\n        localStorage.clear();\n        this.requestUpdate('settings');\n      } else if (ae.detail?.action === 'save') {\n        this.setSetting('language', <Language>this.languageUI.value);\n        this.setSetting('theme', this.darkThemeUI.checked ? 'dark' : 'light');\n        this.requestUpdate('settings');\n      }\n    }\n\n    updated(changedProperties: Map<string | number | symbol, unknown>): void {\n      super.updated(changedProperties);\n      if (changedProperties.has('settings')) use(this.settings.language);\n    }\n\n    constructor(...params: any[]) {\n      super(...params);\n\n      registerTranslateConfig({ loader, empty: key => key });\n      use(this.settings.language);\n    }\n\n    render(): TemplateResult {\n      return html`${ifImplemented(super.render())}\n        <mwc-dialog\n          id=\"settings\"\n          heading=\"${translate('settings.name')}\"\n          @closing=${this.onClosing}\n        >\n          <form>\n            <mwc-select\n              naturalMenuWidth\n              id=\"language\"\n              icon=\"language\"\n              label=\"${translate('settings.language')}\"\n            >\n              ${Object.keys(languages).map(\n                lang =>\n                  html`<mwc-list-item\n                    graphic=\"icon\"\n                    value=\"${lang}\"\n                    ?selected=${lang === this.settings.language}\n                    >${translate(`settings.languages.${lang}`)}</mwc-list-item\n                  >`\n              )}\n            </mwc-select>\n            <mwc-formfield label=\"${translate('settings.dark')}\">\n              <mwc-switch\n                id=\"dark\"\n                ?checked=${this.settings.theme === 'dark'}\n              ></mwc-switch>\n            </mwc-formfield>\n          </form>\n          <mwc-button slot=\"secondaryAction\" dialogAction=\"close\">\n            ${translate('cancel')}\n          </mwc-button>\n          <mwc-button\n            style=\"--mdc-theme-primary: var(--mdc-theme-error)\"\n            slot=\"secondaryAction\"\n            dialogAction=\"reset\"\n          >\n            ${translate('reset')}\n          </mwc-button>\n          <mwc-button unelevated slot=\"primaryAction\" dialogAction=\"save\">\n            ${translate('save')}\n          </mwc-button>\n        </mwc-dialog>`;\n    }\n  }\n\n  return SettingElement;\n}\n"]}