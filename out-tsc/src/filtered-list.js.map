{"version":3,"file":"filtered-list.js","sourceRoot":"","sources":["../../src/filtered-list.ts"],"names":[],"mappings":"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","sourcesContent":["import { List } from '@material/mwc-list';\nimport { CheckListItem } from '@material/mwc-list/mwc-check-list-item';\nimport { ListBase } from '@material/mwc-list/mwc-list-base';\nimport { TextField } from '@material/mwc-textfield';\nimport {\n  css,\n  customElement,\n  html,\n  internalProperty,\n  property,\n  query,\n  TemplateResult,\n  unsafeCSS,\n} from 'lit-element';\n\n@customElement('filtered-list')\nexport class FilteredList extends ListBase {\n  @property({ type: String })\n  searchFieldLabel!: string;\n\n  @property({ type: Boolean })\n  disableCheckAll = false;\n\n  @internalProperty()\n  private get existCheckListItem(): boolean {\n    return this.items.some(item => item instanceof CheckListItem);\n  }\n\n  @internalProperty()\n  private get isAllSelected(): boolean {\n    return this.items\n      .filter(item => !item.disabled)\n      .filter(item => item instanceof CheckListItem)\n      .every(checkItem => checkItem.selected);\n  }\n\n  @internalProperty()\n  private get isSomeSelected(): boolean {\n    return this.items\n      .filter(item => !item.disabled)\n      .filter(item => item instanceof CheckListItem)\n      .some(checkItem => checkItem.selected);\n  }\n\n  @query('mwc-textfield') searchField!: TextField;\n\n  private onCheckAll(): void {\n    const select = !this.isAllSelected;\n    this.items\n      .filter(item => !item.disabled && !item.classList.contains('hidden'))\n      .forEach(item => (item.selected = select));\n  }\n\n  onFilterInput(): void {\n    this.items.forEach(item => {\n      const text: string = (\n        item.innerText +\n        '\\n' +\n        Array.from(item.children)\n          .map(child => (<HTMLElement>child).innerText)\n          .join('\\n')\n      ).toUpperCase();\n      const terms: string[] = this.searchField.value.toUpperCase().split(' ');\n\n      terms.some(term => !text.includes(term))\n        ? item.classList.add('hidden')\n        : item.classList.remove('hidden');\n    });\n  }\n\n  protected onListItemConnected(e: CustomEvent): void {\n    super.onListItemConnected(e);\n    this.requestUpdate();\n  }\n\n  constructor() {\n    super();\n    this.addEventListener('selected', () => {\n      this.requestUpdate();\n    });\n  }\n\n  private renderCheckAll(): TemplateResult {\n    return this.existCheckListItem && !this.disableCheckAll\n      ? html`<mwc-formfield class=\"checkall\"\n          ><mwc-checkbox\n            ?indeterminate=${!this.isAllSelected && this.isSomeSelected}\n            ?checked=${this.isAllSelected}\n            @change=${() => {\n              this.onCheckAll();\n            }}\n          ></mwc-checkbox\n        ></mwc-formfield>`\n      : html``;\n  }\n\n  render(): TemplateResult {\n    return html`<div id=\"tfcontainer\">\n        <mwc-textfield\n          label=\"${this.searchFieldLabel ?? ''}\"\n          iconTrailing=\"search\"\n          outlined\n          @input=${() => this.onFilterInput()}\n        ></mwc-textfield>\n        ${this.renderCheckAll()}\n      </div>\n      ${super.render()}`;\n  }\n\n  static styles = css`\n    ${unsafeCSS(List.styles)}\n\n    #tfcontainer {\n      display: flex;\n      flex: auto;\n    }\n\n    ::slotted(.hidden) {\n      display: none;\n    }\n\n    mwc-textfield {\n      margin: 10px;\n      width: 100%;\n      --mdc-shape-small: 28px;\n    }\n\n    mwc-formfield.checkall {\n      padding-right: 8px;\n    }\n\n    .mdc-list {\n      padding-inline-start: 0px;\n    }\n  `;\n}\n"]}